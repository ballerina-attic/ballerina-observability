/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.tools.ant.taskdefs.condition.Os

description = 'Ballerina - Prometheus Extension - Ballerina Module'

configurations {
    jbalTools
    ballerinaStdLibs
}

dependencies {
    implementation project(':prometheus-extension-native')

    // Ballerina Pack
    jbalTools("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
}

clean {
    delete "${project.projectDir}/target"
    delete "${project.projectDir}/Ballerina.lock"
    delete "${project.projectDir}/ballerina-internal.log"
}

jar {
    manifest {
        attributes('Implementation-Title': project.name, 'Implementation-Version': project.version)
    }
}

task unpackJballerinaTools(type: Copy) {
    configurations.jbalTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        from zipTree(artifact.getFile())
        into new File("${buildDir}/extracted-distributions", "jballerina-tools-zip")
    }
}

task unpackStdLibs() {
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${buildDir}/extracted-distributions", artifact.name + "-zip")
            }
        }
    }
}

task copyStdlibs(type: Copy) {
    def ballerinaDist = "build/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}"
    into ballerinaDist

    /* Standard Libraries */
    configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        def artifactExtractedPath = "${buildDir}/extracted-distributions/" + artifact.name + "-zip"
        into("bir-cache/") {
            from "${artifactExtractedPath}/caches/bir"
        }
        into("bre/lib/") {
            from "${artifactExtractedPath}/libs"
        }
        into("docs/") {
            from "${artifactExtractedPath}/docs"
        }

        // pack to new cache
        into("cache/bir/") {
            from "${artifactExtractedPath}/caches/bir"
        }
        into("cache/balo/") {
            from "${artifactExtractedPath}/caches/balo"
        }
        into("cache/jar/") {
            from "${artifactExtractedPath}/caches/jar"
        }
    }
}

def moduleName = "prometheus"
def moduleOrg = "ballerina"
def ballerinaConfigFile = new File("${project.projectDir}/Ballerina.toml")
def artifactCacheParent = file("$project.projectDir/build/cache_parent/")
def artifactLibParent = file("$project.projectDir/build/lib_parent/")
def tomlVersion = project.version.split("-")[0]
def targetBallerinaJar = file("${project.projectDir}/target/caches/jar_cache/${moduleOrg}/${moduleName}/${tomlVersion}/${moduleOrg}-${moduleName}-${tomlVersion}.jar")
def targetNativeJar = file("$project.rootDir/${moduleName}-extension/native/build/libs/${moduleName}-extension-native-${project.version}.jar")
def originalConfig = ballerinaConfigFile.text

task updateTomlVerions {
    doLast {
        def stdlibDependentConfigVersion = project.stdlibConfigVersion.split("-")[0]
        def stdlibDependentStringUtilsVersion = project.stdlibStringUtilsVersion.split("-")[0]
        def stdlibDependentHttpVersion = project.stdlibHttpVersion.split("-")[0]
        def stdlibDependentObserveVersion = project.stdlibObserveVersion.split("-")[0]

        def newConfig = ballerinaConfigFile.text.replace("@project.version@", project.version)
        newConfig = newConfig.replace("@toml.version@", tomlVersion)
        newConfig = newConfig.replace("@stdlib.config.version@", stdlibDependentConfigVersion)
        newConfig = newConfig.replace("@stdlib.stringutils.version@", stdlibDependentStringUtilsVersion)
        newConfig = newConfig.replace("@stdlib.http.version@", stdlibDependentHttpVersion)
        newConfig = newConfig.replace("@stdlib.observe.version@", stdlibDependentObserveVersion)
        ballerinaConfigFile.text = newConfig
    }
}

task revertTomlFile {
    doLast {
        ballerinaConfigFile.text = originalConfig
    }
}

task ballerinaBuild {
    inputs.dir file(project.projectDir)
    finalizedBy(revertTomlFile)

    doLast {
        def distributionBinPath =  project.projectDir.absolutePath + "/build/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}/bin"

        def additionalBuildParams = ""
        if (project.hasProperty("debug")) {
            additionalBuildParams = "--debug ${project.findProperty("debug")}"
        }

        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "${distributionBinPath}/ballerina.bat build --offline --skip-tests ${additionalBuildParams} -c ${moduleName} && exit %%ERRORLEVEL%%"
            } else {
                commandLine 'sh', '-c', "${distributionBinPath}/ballerina build --offline --skip-tests ${additionalBuildParams} -c ${moduleName}"
            }
        }
        copy {
            from file("${project.projectDir}/Ballerina.toml")
            into file("${artifactCacheParent}/caches/bir/${moduleOrg}/${moduleName}/${tomlVersion}")
        }
        copy {
            from file("${project.projectDir}/Ballerina.toml")
            into file("${artifactCacheParent}/caches/balo/${moduleOrg}/${moduleName}/${tomlVersion}")
        }
        copy {
            from file("${project.projectDir}/Ballerina.toml")
            into file("${artifactCacheParent}/caches/jar/${moduleOrg}/${moduleName}/${tomlVersion}")
        }
        copy {
            from file("${project.projectDir}/target/caches/bir_cache")
            into file("${artifactCacheParent}/caches/bir")
        }
        copy {
            from file("${project.projectDir}/target/balo")
            into file("${artifactCacheParent}/caches/balo/${moduleOrg}/${moduleName}/${tomlVersion}")
        }
        copy {
            from targetBallerinaJar
            into file("${artifactCacheParent}/caches/jar/${moduleOrg}/${moduleName}/${tomlVersion}")
        }
        copy {
            from targetBallerinaJar
            into file("${artifactLibParent}/libs")
        }
        copy {
            from targetNativeJar
            into file("${artifactLibParent}/libs")
        }

        // Publish to central
        if (!project.version.endsWith('-SNAPSHOT') && ballerinaCentralAccessToken != null && project.hasProperty("publishToCentral")) {
            println("Publishing to the ballerina central..")
            exec {
                workingDir project.projectDir
                environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine 'cmd', '/c', "$distributionBinPath/ballerina.bat push ${moduleName} && exit %%ERRORLEVEL%%"
                } else {
                    commandLine 'sh', '-c', "$distributionBinPath/ballerina push ${moduleName}"
                }
            }

        }
    }

    outputs.dir artifactCacheParent
    outputs.dir artifactLibParent
}

task createArtifactZip(type: Zip) {
    destinationDirectory = file("${buildDir}/distributions")
    from ballerinaBuild
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/${System.getenv("packagePublishRepo")}")
            credentials {
                username = System.getenv("packageUser")
                password = System.getenv("packagePAT")
            }
        }
    }
}

copyStdlibs.dependsOn unpackJballerinaTools
copyStdlibs.dependsOn unpackStdLibs
updateTomlVerions.dependsOn copyStdlibs
ballerinaBuild.dependsOn updateTomlVerions
ballerinaBuild.dependsOn ":prometheus-extension-native:build"
build.dependsOn ballerinaBuild
